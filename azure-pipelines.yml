trigger:
  - production

resources:
  - repo: self

variables:
  - group: auditly-frontend-secrets
  - name: dockerRegistryServiceConnection
    value: "ca9007d7-55f3-4e99-9886-124a3e88638d"
  - name: containerRegistry
    value: "auditly.azurecr.io"
  - name: imageRepository
    value: "auditly-frontend"
  - name: dockerfilePath
    value: "$(Build.SourcesDirectory)/Dockerfile"
  - name: tag
    value: "$(Build.BuildId)"
  - name: azureSubscription
    value: "auditly-app-container-update-connection"
  - name: resourceGroup
    value: "Auditly-Backend"
  - name: containerAppName
    value: "app-auditly"
  - name: vmImageName
    value: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build and push image
    jobs:
      - job: BuildAndPush
        displayName: Build then Push
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build image
            inputs:
              command: build
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath)
              buildContext: $(Build.SourcesDirectory)
              arguments: |
                --build-arg NEXT_PUBLIC_API_BASE="$(NEXT_PUBLIC_API_BASE)"
              tags: |
                $(tag)

          - task: Docker@2
            displayName: Push image
            inputs:
              command: push
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Update Container App image
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UpdateContainerApp
        displayName: Update ACA revision with new image
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureCLI@2
            displayName: Update Azure Container App
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail
                az extension add --name containerapp --upgrade
                IMAGE="$(containerRegistry)/$(imageRepository):$(tag)"
                az containerapp update \
                  --name "$(containerAppName)" \
                  --resource-group "$(resourceGroup)" \
                  --image "${IMAGE}" \
                  --revision-suffix "r$(Build.BuildId)"
